import Chan from './Chan'
import setThreadInfo from './utility/setThreadInfo'
import createByIdIndex from '../utility/createByIdIndex'
import getMessages from './utility/getMessages'
import configuration from '../configuration'
import UserData from '../UserData/UserData'

import getPostText from 'social-components/commonjs/utility/post/getPostText'
import trimText from 'social-components/commonjs/utility/post/trimText'

export default async function getThread({
	boardId,
	threadId,
	censoredWords,
	messages,
	http
}) {
	const chan = Chan({ censoredWords, messages, http })
	const thread = await chan.getThread({
		boardId,
		threadId
	}, {
		// The parser parses thread comments up to 4x faster without parsing their content.
		// Example: when parsing comments content — 650 ms, when not parsing comments content — 200 ms.
		parseContent: false,
		// Add `.parseContent()` function to each `comment`.
		addParseContent: true,
		commentLengthLimit: configuration.commentLengthLimit
	})
	// The "opening" post of a thread is always parsed
	// when showing thread page because it's always immediately visible
	// and also because `title` is autogenerated from it.
	thread.comments[0].parseContent()
	// Generate text preview which is used for `<meta description/>` on the thread page.
	generateTextPreview(thread.comments[0], messages)
	setThreadInfo(thread, {
		mode: 'thread',
		votes: UserData.getCommentVotes(boardId, threadId)
	})
	return {
		boardId,
		thread: {
			...thread
		}
	}
}

/**
 * Generates a text preview of a comment.
 * Text preview is used for `<meta description/>`.
 * @param {object} comment
 * @return {string} [preview]
 */
function generateTextPreview(comment, messages) {
	const textPreview = getPostText(comment, {
		ignoreAttachments: true,
		softLimit: 150,
		messages: messages.contentType
	})
	if (textPreview) {
		comment.textPreview = trimText(textPreview, 150)
	}
}