import getPostSummary from 'webapp-frontend/src/utility/post/getPostSummary'
import getPostText from 'webapp-frontend/src/utility/post/getPostText'
import censorWords from 'webapp-frontend/src/utility/post/censorWords'

import createByIdIndex from './utility/createByIdIndex'
import getInReplyToPostIds from './getInReplyToPostIds'
import setReplies from './setReplies'
import generateQuotes from './generateQuotes'

export default function constructThread(threadInfo, comments, {
	boardId,
	messages,
	censoredWords,
	commentLengthLimit,
	commentUrlParser,
	expandReplies
}) {
	const threadId = comments[0].id
	// On `8ch.net` "rolling" "sticky" threads are
	// also marked as `bumplimit: 1` when their
	// technical "bump limit" is technically "reached".
	// By definition, "rolling" and "sticky" threads don't expire.
	if (threadInfo.isSticky || threadInfo.isRolling) {
		if (threadInfo.isBumpLimitReached) {
			threadInfo.isBumpLimitReached = false
		}
	}
	// Set `.inReplyTo` array for each comment.
	// `.inReplyTo` array contains comment IDs.
	for (const comment of comments) {
		const inReplyTo = getInReplyToPostIds(comment, {
			boardId,
			threadId,
			commentUrlParser
		})
		if (inReplyTo) {
			comment.inReplyTo = inReplyTo
		}
	}
	// Set `.replies` array for each comment
	// based on the `.inReplyTo` array.
	// `.replies` array contains comment IDs.
	// Can only come after `.inReplyTo` arrays are set on comments.
	setReplies(comments)
	// `Array.find()` is slow for doing it every time.
	// A "get post by id" index is much faster.
	const getCommentById = createByIdIndex(comments)
	for (const comment of comments) {
		// If the comment has any content and `parseContent` is not `false`
		// (in which case `comment.content` has already been parsed)
		// then create autogenerated content (such as "in reply to" quotes) right now.
		// Otherwise, defer until `post.parseContent()` is called.
		if (comment.content) {
			// Set "Deleted message" for links to deleted comments.
			// Set "Hidden message" for links to hidden comments.
			// Autogenerate "in reply to" quotes for links to all other comments.
			generateQuotes(comment.content, {
				// `comment` is only used for generating post preview.
				comment,
				commentLengthLimit,
				getCommentById,
				threadId,
				messages,
				isFirstRun: true
			})
		}
	}
	if (expandReplies) {
		// Expand `replies` array from a list of reply `id`s to a list of the reply objects.
		for (const comment of comments) {
			if (comment.replies) {
				comment.replies = comment.replies.map(getCommentById)
			}
		}
	}
	// Autogenerate thread title.
	if (!threadInfo.title) {
		threadInfo.title = getPostTitle(comments[0], { messages })
		if (threadInfo.title) {
			if (censoredWords) {
				const titleCensored = censorWords(threadInfo.title, censoredWords)
				if (titleCensored !== threadInfo.title) {
					threadInfo.titleCensored = getPostText(titleCensored)
				}
			}
		}
	}
	// The date on which the thread was created.
	// All chans except `lynxchan` have this.
	// `lynxchan` doesn't have it which is a bug
	// but seems like they don't want to fix it.
	if (comments[0].createdAt) {
		threadInfo.createdAt = comments[0].createdAt
	}
	return {
		...threadInfo,
		id: threadId,
		comments
	}
}

function getPostTitle(post, { messages }) {
	if (post.title) {
		return post.title
	}
	const summary = getPostSummary(post.content, post.attachments, {
		messages: messages.contentType,
		maxLength: 60,
		stopOnNewLine: true
	})
	if (summary) {
		return summary
	}
	// Thread title is guaranteed to be non-empty.
	return `#${post.id}`
}