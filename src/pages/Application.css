@import "../styles/common";

:root {
	--Content-maxWidth: var(--Text-maxWidth);
}

.Webpage--board,
.Webpage--thread,
.InReplyToModal {
	--Content-maxWidth: var(--CommentsList-maxWidth);
}

/* These two override `padding-left` and `padding-right` on `.Content`. */
.ThreadPage,
.BoardPage {
	--PageContent-paddingLeft: 0px;
}

.Webpage {
	display: flex;
	/* For z-index ordering (relative to preloading screen). */
	/* Otherwise preloading screen will always be above content (even when it's not shown). */
	position: relative;
	z-index: 0;
}

/* Content takes all free space */
.Webpage-content {
	position: relative;
	z-index: 0;

	margin-top: var(--Header-height);

	flex-shrink: 0;
	flex-grow: 1;
	flex-basis: auto;

	/* Is focusable (for keyboard navigation: page up, page down). */
	outline: none;

	@mixin m {
		display: flex;
		align-items: center;
		flex-direction: column;
	}
}

.Webpage--offline {
	--Header-height: 0px;
	.Webpage-contentContainer {
		margin-left: auto;
		margin-right: auto;
	}
}

.Webpage-contentContainer {
	flex: 1;
	display: flex;
	flex-direction: column;
	/* Stretches the page to 100% height. */
	min-height: 100vh;
	/* Prevents horizontal overflow. */
	width: 100%;
	max-width: 100%;
}

.Webpage-contentContainer {
	flex-basis: var(--Content-maxWidth);
}

.Webpage--board,
.Webpage--thread {
	main {
		width: 100%;
		max-width: var(--Content-maxWidth);
		/* Center horizontally. */
		margin-left: auto;
		margin-right: auto;
	}
}

.Content {
	padding-left: var(--PageContent-paddingLeft);
	padding-right: var(--PageContent-paddingLeft);

	/* Prevents horizontal overflow of a page. */
	width: 100%;
}

.Content--text {
	width: 100%;
	max-width: var(--Text-maxWidth);
}

/*
.Webpage--contentSections {
	.BackgroundContent {
		padding-left: 0;
		padding-right: 0;
	}
}
*/

@mixin upto-m {
	.Webpage--contentSections {
		.Content {
			--PageContent-paddingLeft: 0px;
		}
		.BackgroundContent {
			padding-left: var(--unit);
			padding-right: var(--unit);
		}
		/*
		If comments don't have any side padding
		then the root replies branch line would be ineligible
		because it would be drawn at the very screen edge.
		This CSS class can be used for styling such special case.
		*/
		/*
		.CommentTree {
			--comment-tree-root-level-replies-branch-width-factor: 0.75;
		}
		*/
	}
}

@mixin upto-m {
	.Sidebar {
		transform: translateX(100%);
		/* `box-shadow` is animated at XS-M screen sizes. */
		transition: transform 160ms ease-out, box-shadow 160ms ease-out;
		position: fixed;
		left: 0;
		top: 0;
		right: 0;
		bottom: var(--FooterMenu-height);
		z-index: var(--sidebar-z-index);
		/*background-color: var(--Sidebar-backgroundColor--collapsible);*/
	}
	.Document--leftHanded {
		.Sidebar:not(.Sidebar--show) {
			transform: translateX(-100%);
		}
	}
	/*.light, .dark {
		--Sidebar-highlightColor-100: var(--Sidebar-highlightColor-100--collapsible);
		--Sidebar-highlightColor-200: var(--Sidebar-highlightColor-200--collapsible);
	}*/
	.Sidebar--show {
		transform: none;
	}
	/* The extra specificity is to override .HomePage__show-boards-list { display: none }. */
	.HomePage {
		.HomePage-showBoardsList {
			display: block !important;
		}
	}
}

@mixin xs-m {
	.Sidebar {
		left: auto;
		width: $screen-xs-min;
	}
	.Document--leftHanded {
		.Sidebar {
			right: auto;
			left: 0;
		}
	}
	.Sidebar--show {
		/* `box-shadow` adds some extra eligibility but at the same time
		   it makes the left border stand out a bit more that in turn
		   makes the move-in/move-out animation a bit more distracting.
		   The extra eligibility is desireable at screen sizes when
		   the sidebar is not full-width. Otherwise, it's not required. */
		box-shadow: 0 0 5px rgba(0,0,0,0.05);
	}
}

@mixin upto-s {
	:root {
		--Header-height: 0px;
	}
}

@mixin l-plus {
	:root {
		--FooterMenu-height: 0px;
	}

	.Sidebar {
		position: sticky;
		top: var(--Header-height);
		min-height: calc(100vh - var(--Header-height));
		max-height: calc(100vh - var(--Header-height));
		min-width: var(--Sidebar-minWidth);
		/* Resets any `transform`/`transition`/`box-shadow`
		   potentially set on XS-S-size screens. */
		transform: none;
		transition: none;
		box-shadow: none;
	}

	.Webpage--board,
	.Webpage--thread {
		.Content--text {
		  width: 100%;
			max-width: var(--Text-maxWidth);
		}
	}

	.Footer .MainMenu {
		display: none;
	}

	/*.Webpage-paddingLeft,
	.Webpage-paddingRight {
		min-width: 0;
	}*/
	.Webpage-contentContainer {
		flex-grow: 0;
		/* Is shrinkable so that it leaves some space
		   to the sidebar on smaller screens. */
		/*flex-shrink: 1;*/
	}
	.Webpage-paddingLeft {
		flex-grow: var(--PaddingLeft-flexGrow);
	}
	.Webpage-paddingRight {
		flex-grow: var(--PaddingRight-flexGrow);
	}
	.Sidebar {
		flex-grow: var(--Sidebar-flexGrow);
		flex-basis: var(--Sidebar-flexBasis);
	}
	:root {
		--PaddingRight-flexGrow--wide: 0.1;
		--Sidebar-flexGrow--wide: calc(var(--PaddingRight-flexGrow) + var(--Sidebar-flexGrow) - var(--PaddingRight-flexGrow--wide));
	}
	/* Move notifications to the right side
	   because they aren't that eligible when shown
	   above the sidebar with the boards list. */
	/* Update: Sidebar has been moved to the right side. */
	/*
	.rrui__snackbar__container {
		justify-content: flex-end;
	}
	*/
}

@mixin l-xl {
	/* On "xxl" screens (1440p and larger) the screen width is enough
	   no not widen the sidebar for "wide" content.
	   This results in better UX because sidebar width doesn't "jump"
	   when switching to "Tracked threads" / "Notifications". */
	.Webpage--wideSidebar {
		--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--wide);
		--Sidebar-minWidth: var(--Sidebar-minWidth--wide);
		--Sidebar-flexGrow: var(--Sidebar-flexGrow--wide);
	}
}

@mixin l {
	/* Flexbox proportions. */
	:root {
		--PaddingLeft-flexGrow: 1;
		--PaddingRight-flexGrow: 0.3;
		--Sidebar-flexBasis: var(--Sidebar-minWidth);
		--Sidebar-flexGrow: 0.4;
		--Sidebar-minWidth: calc(var(--unit) * 23);
		--Sidebar-minWidth--wide: calc(var(--unit) * 36);
	}
}

@mixin xl-plus {
	/* Flexbox proportions. */
	:root {
		--PaddingLeft-flexGrow: 1;
		--PaddingRight-flexGrow: 0.25;
		--PaddingRight-flexGrow--thread: var(--PaddingRight-flexGrow); /* 0.5; */
		/* Setting sidebar `flex-basis` to `0` so that the layout is computed
		   purely via `flex` shares of left padding, right padding and the sidebar
		   resulting in page content always being centered. */
		--Sidebar-flexBasis: 0;
		--Sidebar-flexGrow: calc(var(--PaddingLeft-flexGrow) - var(--PaddingRight-flexGrow));
		--Sidebar-flexGrow--thread: calc(var(--PaddingRight-flexGrow) + var(--Sidebar-flexGrow) - var(--PaddingRight-flexGrow--thread));
		/* Setting `min-width` to `0` so that flexbox resizes non-central columns
		   only based on their `flex-grow`: this makes it easy to place the central
		   column in the center of the screen. */
		/* Otherwise the layout would "jump" for some weird reason when
		   switching "Tracked threads" / "Notifications" on `/b/` page
		   where thumbnail width is small. */
		--Sidebar-minWidth: 0px;
		/*--Sidebar-minWidth: calc(var(--unit) * 25);*/
		/* Setting `--Sidebar-minWidth--wide` to `--Sidebar-minWidth`
		   so that flexbox doesn't resize non-right-side columns
		   when clicking "Tracked threads" and "Notifications" menu buttons. */
		--Sidebar-minWidth--wide: var(--Sidebar-minWidth);
		/*--Sidebar-minWidth--wide: calc(var(--unit) * 40);*/
	}
	.Webpage--board,
	.Webpage--thread {
		&:not(.Webpage--wideSidebar) {
			/* These rules must be equal to those in the "xxl-plus" mixin below. */
			--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--thread);
			--Sidebar-flexGrow: var(--Sidebar-flexGrow--thread);
		}
		/* `flex-basis` must be equal to `.Comment-thumbnail` width + margins:
		   this makes thread comment text centered on screen. */
		--Sidebar-flexBasis: calc(var(--PostThumbnail-maxWidth) + 2 * var(--Picture-borderWidth) + 2 * var(--PostThumbnail-marginRight));
	}
}

@mixin xxl-plus {
	.Webpage--board,
	.Webpage--thread {
		/* Overrides the `&:not(.Webpage--wideSidebar)` selector above. */
		&.Webpage--wideSidebar {
			/* These rules must be equal to those in the "xl-plus" mixin above. */
			--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--thread);
			--Sidebar-flexGrow: var(--Sidebar-flexGrow--thread);
		}
	}
}