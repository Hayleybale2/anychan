@import "../styles/common.css";

:root {
	--Content-maxWidth: var(--Text-maxWidth);
}

/*
.Webpage--channel,
.Webpage--thread,
.InReplyToModal {
	--Content-maxWidth: var(--CommentsList-maxWidth);
}
*/

.Webpage {
	--Content-maxWidth: var(--CommentsList-maxWidth);
}

.Webpage-contentContainer {
	/* `flex-basis` has to be set here because `flex-grow` is set to `0`. */
	/* This ensures that the content width stays the same on any page. */
	flex-basis: var(--Content-maxWidth);
}

/*@mixin l-xl {*/
	/* On "xxl" screens (1440p and larger) the screen width is enough
	   and the Sidebar is not required to be "expanded" in order to show
	   content like notifications, etc.
	   It could be "expanded" to a larger width when "Notifications" icon
	   is clicked, but not "expanding" it in such scenarios
	   results in better UX because the Sidebar width doesn't "jump"
	   on user interaction. */
	/*
	.Webpage--wideSidebar {
		--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--wide);
		--SidebarRight-minWidth: var(--SidebarRight-minWidth--wide);
		--SidebarRight-flexGrow: var(--SidebarRight-flexGrow--wide);
	}
	*/
/*}*/

@mixin l-plus {
	/*
	:root {
		--PaddingRight-flexGrow--wide: 0.1;
		--SidebarRight-flexGrow--wide: calc(var(--PaddingRight-flexGrow) + var(--SidebarRight-flexGrow) - var(--PaddingRight-flexGrow--wide));
	}
	*/
	.Webpage-contentContainer {
		flex-grow: 0;
	}
	.Webpage-paddingLeft {
		/* `position: relative` is for the <BackButton/>'s `width: 100%`. */
		position: relative;
		flex-grow: var(--PaddingLeft-flexGrow);
		min-width: var(--PaddingLeft-minWidth);
	}
	.Webpage-paddingRight {
		flex-grow: var(--PaddingRight-flexGrow);
		min-width: var(--PaddingRight-minWidth);
	}
	.SidebarLeft {
		flex-grow: var(--SidebarLeft-flexGrow);
		flex-basis: var(--SidebarLeft-flexBasis);
		min-width: var(--SidebarLeft-minWidth);
	}
	.SidebarRight {
		flex-grow: var(--SidebarRight-flexGrow);
		flex-basis: var(--SidebarRight-flexBasis);
		min-width: var(--SidebarRight-minWidth);
	}
}

/* On "L" screens, Sidebar is expandable. */
@mixin l {
	/* Flexbox proportions. */
	:root {
		--PaddingLeft-flexGrow: 1;
		--PaddingRight-flexGrow: 0.3;

		/* Doesn't show `.SidebarLeft` on L-size screens. */
		--SidebarLeft-flexBasis: 0px;
		--SidebarLeft-flexGrow: 0;
		--SidebarLeft-minWidth: 0px;

		--SidebarRight-flexBasis: var(--SidebarRight-minWidth);
		--SidebarRight-flexGrow: 0.4;
		--SidebarRight-minWidth: calc(var(--unit) * 23);

		/*--SidebarRight-minWidth--wide: calc(var(--unit) * 36);*/
	}
}

@mixin xl-plus {
	/* Flexbox proportions. */
	.Webpage--centerPageContent,
	.Webpage--centerCommentTextContent {
		/* `SidebarLeft` isn't shown at all in this case. */
		--SidebarLeft-flexGrow: 0;
		/* `flex-basis` is set to `0` here so that the left sidebar's content width
		   isn't taken into account when `SidebarLeft` width is calculated by the browser
		   when deciding which parts of the `display: flex` parent should be occupied by which children. */
		--SidebarLeft-flexBasis: 0px;
		/* Setting `min-width` to `0` so that flexbox layout doesn't take into account
		   the width of `SidebarLeft` content at all. */
		--SidebarLeft-minWidth: 0px;

		--PaddingLeft-flexGrow: 1;
		--PaddingLeft-minWidth: 0px;

		--PaddingRight-flexGrow: 0.25;
		--PaddingRight-minWidth: 0px;

		--SidebarRight-flexGrow: calc(var(--PaddingLeft-flexGrow) - var(--PaddingRight-flexGrow));
		/* Setting `min-width` to `0` so that flexbox resizes non-central columns
		   only based on their `flex-grow`: this makes it easy to place the central
		   column in the center of the screen. */
		/* Otherwise the layout would "jump" for some weird reason when
		   switching "Thread Subscriptions" / "Notifications" on `/b/` page
		   where thumbnail width is small. */
		--SidebarRight-minWidth: 0px;
		/*--SidebarRight-minWidth: calc(var(--unit) * 25);*/
		/* Setting `--SidebarRight-minWidth--wide` to `--SidebarRight-minWidth`
		   so that flexbox doesn't resize non-right-side columns
		   when clicking "Thread Subscriptions" and "Notifications" menu buttons. */
		/*--SidebarRight-minWidth--wide: var(--SidebarRight-minWidth);*/
	}

	.Webpage--centerPageContent {
		/* `flex-basis` is set to `0` here so that the sidebar's content width
		   isn't taken into account when Sidebar width is calculated by the browser.
		   In that case, Sidebar width will be calculated based on just the `flex` shares
		   of the "left padding" element and the "right padding" element,
		   resulting in Sidebar width being equal to the sum of the widths of
		   the "left padding" element and the "right padding" element,
		   which results in the page content being centered on screen.
		   This type of Sidebar width is used on "regular" pages ("Home", "Settings", etc). */
		--SidebarRight-flexBasis: 0;
	}

	/* Channel and thread pages use a slightly different Sidebar width calculation formula:
	   on those pages, instead of simply making Sidebar width equal to the sum of the widths
	   of the "left padding" element and the "right padding" element, because on those pages
	   it's not the "page content" itself that should be centered, but rather comment's
	   text, and comment's text is offset by a thumbnail image on the left
	   (on large screens, which it is).
	   So, on channel and thread pages, Sidebar's `flex-basis` is set in such a way
	   that it results in comment's text being centered on screen. */
	.Webpage--centerCommentTextContent {
		/* In order for a thread comment text to be centered on screen,
		   `flex-basis` must be equal to thumbnail's width, plus its side margins and borders.
		   This results in page content being offset to the left, resulting in the actual
		   comment's text being centered on screen. */
		--SidebarRight-flexBasis: calc(var(--PostThumbnail-maxWidth) + 2 * var(--Picture-borderWidth) + 2 * var(--PostThumbnail-marginRight));

		/* Something that was written for a special layout for "ultrawide" screens: */
		/*&:not(.Webpage--wideSidebar) {*/
			/* These rules must be equal to those in the "xxl-plus" mixin below. */
			/*--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--threadPage);*/
			/*--SidebarRight-flexGrow: var(--SidebarRight-flexGrow--threadPage);*/
		/*}*/
	}

	.Webpage--withLeftSidebar {
		--SidebarLeft-flexGrow: 150000000;
		/* `flex-basis` is set to `0` here so that the left sidebar's content width
		   isn't taken into account when `SidebarLeft` width is calculated by the browser
		   when deciding which parts of the `display: flex` parent should be occupied by which children. */
		--SidebarLeft-flexBasis: 0px;
		/* Setting `min-width` to `0` so that flexbox layout doesn't take into account
		   the width of `SidebarLeft` content at all. */
		--SidebarLeft-minWidth: 0px;

		/* `flex-grow` for `PaddingLeft` is set to a relatively extremely small value
		   just so that it doesn't influence the layout under normal circumstances at all
		   but at the same time starts playing role past a certain screen width threshold. */
		--PaddingLeft-flexGrow: 1;
		--PaddingLeft-minWidth: calc(var(--Comment-marginTop--nested) * 2);

		/* `flex-grow` for `PaddingRight` is set to a relatively extremely small value
		   just so that it doesn't influence the layout under normal circumstances at all
		   but at the same time starts playing role past a certain screen width threshold. */
		--PaddingRight-flexGrow: 1;
		--PaddingRight-minWidth: calc(var(--Comment-marginTop--nested) * 2);

		--SidebarRight-flexGrow: 100000000;
		--SidebarRight-flexBasis: 0;
		--SidebarRight-minWidth: 0px;
	}
}

/* Something that was written for a special layout for "ultrawide" screens: */
/*@mixin xxl-plus {*/
	/*.Webpage--channel,*/
	/*.Webpage--thread {*/
		/* Overrides the `&:not(.Webpage--wideSidebar)` selector above. */
		/*&.Webpage--wideSidebar {*/
			/* These rules must be equal to those in the "xl-plus" mixin above. */
			/*--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--threadPage);*/
			/*--SidebarRight-flexGrow: var(--SidebarRight-flexGrow--threadPage);*/
		/*}*/
	/*}*/
/*}*/