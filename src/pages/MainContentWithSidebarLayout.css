@import "../styles/common";

:root {
	--Content-maxWidth: var(--Text-maxWidth);
}

.Webpage--channel,
.Webpage--thread,
.InReplyToModal {
	--Content-maxWidth: var(--CommentsList-maxWidth);
}

.Webpage-contentContainer {
	flex-basis: var(--Content-maxWidth);
}

/*@mixin l-xl {*/
	/* On "xxl" screens (1440p and larger) the screen width is enough
	   and the Sidebar is not required to be "expanded" in order to show
	   content like notifications, etc.
	   It could be "expanded" to a larger width when "Notifications" icon
	   is clicked, but not "expanding" it in such scenarios
	   results in better UX because the Sidebar width doesn't "jump"
	   on user interaction. */
	/*
	.Webpage--wideSidebar {
		--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--wide);
		--Sidebar-minWidth: var(--Sidebar-minWidth--wide);
		--Sidebar-flexGrow: var(--Sidebar-flexGrow--wide);
	}
	*/
/*}*/

@mixin l-plus {
	/*
	:root {
		--PaddingRight-flexGrow--wide: 0.1;
		--Sidebar-flexGrow--wide: calc(var(--PaddingRight-flexGrow) + var(--Sidebar-flexGrow) - var(--PaddingRight-flexGrow--wide));
	}
	*/
	.Webpage-contentContainer {
		flex-grow: 0;
	}
	.Webpage-paddingLeft {
		flex-grow: var(--PaddingLeft-flexGrow);
	}
	.Webpage-paddingRight {
		flex-grow: var(--PaddingRight-flexGrow);
	}
	.Sidebar {
		flex-grow: var(--Sidebar-flexGrow);
		flex-basis: var(--Sidebar-flexBasis);
		min-width: var(--Sidebar-minWidth);
	}
}

/* On "L" screens, Sidebar is expandable. */
@mixin l {
	/* Flexbox proportions. */
	:root {
		--PaddingLeft-flexGrow: 1;
		--PaddingRight-flexGrow: 0.3;
		--Sidebar-flexBasis: var(--Sidebar-minWidth);
		--Sidebar-flexGrow: 0.4;
		--Sidebar-minWidth: calc(var(--unit) * 23);
		/*--Sidebar-minWidth--wide: calc(var(--unit) * 36);*/
	}
}

@mixin xl-plus {
	/* Flexbox proportions. */
	:root {
		--PaddingLeft-flexGrow: 1;
		--PaddingRight-flexGrow: 0.25;
		/* `flex-basis` is set to `0` here so that the sidebar's content width
		   isn't taken into account when Sidebar width is calculated by the browser.
		   In that case, Sidebar width will be calculated based on just the `flex` shares
		   of the "left padding" element and the "right padding" element,
		   resulting in Sidebar width being equal to the sum of the widths of
		   the "left padding" element and the "right padding" element,
		   which results in the page content being centered on screen.
		   This type of Sidebar width is used on "regular" pages ("Home", "Settings", etc). */
		--Sidebar-flexBasis: 0;
		--Sidebar-flexGrow: calc(var(--PaddingLeft-flexGrow) - var(--PaddingRight-flexGrow));
		/* Setting `min-width` to `0` so that flexbox resizes non-central columns
		   only based on their `flex-grow`: this makes it easy to place the central
		   column in the center of the screen. */
		/* Otherwise the layout would "jump" for some weird reason when
		   switching "Tracked threads" / "Notifications" on `/b/` page
		   where thumbnail width is small. */
		--Sidebar-minWidth: 0px;
		/*--Sidebar-minWidth: calc(var(--unit) * 25);*/
		/* Setting `--Sidebar-minWidth--wide` to `--Sidebar-minWidth`
		   so that flexbox doesn't resize non-right-side columns
		   when clicking "Tracked threads" and "Notifications" menu buttons. */
		/*--Sidebar-minWidth--wide: var(--Sidebar-minWidth);*/
	}
	/* Channel and thread pages use a slightly different Sidebar width calculation formula:
	   on those pages, instead of simply making Sidebar width equal to the sum of the widths
	   of the "left padding" element and the "right padding" element, because on those pages
	   it's not the "page content" itself that should be centered, but rather comment's
	   text, and comment's text is offset by a thumbnail image on the left
	   (on large screens, which it is).
	   So, on channel and thread pages, Sidebar's `flex-basis` is set in such a way
	   that it results in comment's text being centered on screen. */
	.Webpage--channel,
	.Webpage--thread {
		/*&:not(.Webpage--wideSidebar) {*/
			/* These rules must be equal to those in the "xxl-plus" mixin below. */
			/*--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--threadPage);*/
			/*--Sidebar-flexGrow: var(--Sidebar-flexGrow--threadPage);*/
		/*}*/
		/* In order for a thread comment text to be centered on screen,
		   `flex-basis` must be equal to thumbnail's width, plus its side margins and borders.
		   This results in page content being offset to the left, resulting in the actual
		   comment's text being centered on screen. */
		--Sidebar-flexBasis: calc(var(--PostThumbnail-maxWidth) + 2 * var(--Picture-borderWidth) + 2 * var(--PostThumbnail-marginRight));
	}
}

/*@mixin xxl-plus {*/
	/*.Webpage--channel,*/
	/*.Webpage--thread {*/
		/* Overrides the `&:not(.Webpage--wideSidebar)` selector above. */
		/*&.Webpage--wideSidebar {*/
			/* These rules must be equal to those in the "xl-plus" mixin above. */
			/*--PaddingRight-flexGrow: var(--PaddingRight-flexGrow--threadPage);*/
			/*--Sidebar-flexGrow: var(--Sidebar-flexGrow--threadPage);*/
		/*}*/
	/*}*/
/*}*/