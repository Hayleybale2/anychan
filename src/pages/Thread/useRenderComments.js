import { useState, useCallback, useRef, useEffect } from 'react'

export default function useRenderComments({ shownComments }) {
	// Track the containing React component "mounted" state.
	const isMounted = useRef()
	useEffect(() => {
		isMounted.current = true
		return () => {
			isMounted.current = false
		}
	}, [])

	// The `updateFlag` variable isn't used anywhere.
	// Its only purpose is that calling `setUpdateFlag()` triggers a state update
	// which causes a re-render of the containing React component.
	const [updateFlag, setUpdateFlag] = useState({})

	// `renderComment()` is called whenever there's a "parent" comment
	// whose `content` did change (for example, when YouTube video links got loaded,
	// or Twitter links got loaded, etc), and when there're any "replies" to that
	// parent comment having "autogenerated" quotes generated from that parent comment's content.
	// It also doesn't stop at that level, and goes arbitrarily deep into the replies tree,
	// because there might be "deeper" replies to a reply having an "autogenerated" quote,
	// and those "deeper" replies' "autogenerated" quotes might be autogenerated from that
	// "autogenerated" quote, so the whole thing is recursive.
	// So, when the parent comment's `content` changes (for example, as a result of
	// loading "resource" links), all of the affected (descendant) "replies" should be
	// re-rendered too.
	return useCallback((commentIds) => {
		// `loadResourceLinks()` calls `renderComments()` with all affected
		// descendant comment IDs. Loading resource links is done "asynchronously",
		// and that process may finish already after the comment tree is unmounted.
		if (isMounted.current === false) {
			return
		}

		// Update the changed comments' object "references"
		// so that the relevant comment list items are re-rendered.
		// Don't change object "references" in `thread.comments`
		// because those object "references" have already been cached
		// by `getCommentById()` function that is used throughout the code.
		// Instead, change object "references" in `shownComments`:
		// this one can be modified and is not used in any "get object by id" caches.
		for (const commentId of commentIds) {
			const index = shownComments.findIndex(comment => comment.id === commentId)

			// `loadResourceLinks()` calls `renderComments()` with all affected
			// descendant comment IDs, regardless of whether they're shown or not.
			if (index >= 0) {
				// Update the object "reference" so that the comment element is re-rendered.
				shownComments[index] = { ...shownComments[index] }
			}
		}

		setUpdateFlag({})

		// // Calling `setCommentUpdateFlags()` triggers a `useState()` update that
		// // re-renders the containing React component which is `CommentsList.js`.
		// setCommentUpdateFlags(
		// 	commentIds.reduce((commentUpdateFlags, commentId) => {
		// 		commentUpdateFlags[String(commentId)] = {}
		// 		return commentUpdateFlags
		// 	}, {
		// 		// Update the object's "reference".
		// 		...commentUpdateFlags
		// 	})
		// )
	}, [])
}