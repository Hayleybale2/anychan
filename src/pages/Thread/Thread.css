@import "../../styles/common.css";

:root {
	--NoNewComments-marginTop: calc(var(--unit) * 5);
	--NoNewComments-marginBottom: var(--NoNewComments-marginTop);
	@mixin l-plus {
		--NoNewComments-marginTop: calc(var(--unit) * 7);
	}
}

.ThreadPage {
	/* `position: relative` is for <Toolbar/>. */
	position: relative;
}

/* Using `.ThreadPage` instead of `.Comment--thread` here
	 because `var(--Post-color--secondary)` is used in `ThreadPage-stats`. */
.ThreadPage {
	--Post-color--secondary: var(--Post-color--secondaryThread);
}

.ThreadPage {
	--ThreadPageHeader-height: var(--ChannelThreadHeader-height);
	--ThreadPageHeader-paddingLeft: var(--ChannelThreadHeader-paddingLeft);
	--ThreadPageHeader-paddingRight: var(--ChannelThreadHeader-paddingRight);
	--ThreadPageHeader-fontSize: var(--ChannelThreadHeader-fontSize);
	--ThreadPageHeader-fontWeight: var(--ChannelThreadHeader-fontWeight);
	--ThreadPageHeader-textAlign: var(--ChannelThreadHeader-textAlign);

	.ThreadPageHeader {
		position: sticky;
		top: 0;
		z-index: 1;
		height: calc(var(--ChannelThreadHeader-height) + var(--ChannelThreadHeader-borderWidth));
		width: var(--ChannelThreadHeader-width);
		margin-left: var(--ChannelThreadHeader-marginLeft);
		margin-right: var(--ChannelThreadHeader-marginRight);
		padding-left: var(--ChannelThreadHeader-paddingLeft);
		border-bottom: var(--ChannelThreadHeader-borderWidth) solid var(--ChannelThreadHeader-borderColor);
		background-color: var(--ChannelThreadHeader-backgroundColor);
	}
}

.ThreadPage-noNewComments {
	margin-top: 0;
	margin-bottom: 0;
	/* Using `padding-top` instead of `margin-top` here
	   so that `<Toolbar/>` vertical position is preserved
	   when clicking on "Show previous comments" button. */
	padding-top: var(--NoNewComments-marginTop);
	/* `margin-bottom` doesn't collapse with `<Footer/>`'s `margin-top` anyway. */
	margin-bottom: var(--NoNewComments-marginBottom);
	text-align: center;
	color: var(--Content-color-700);
	font-size: 125%;
}

.ThreadPage {
	.ShowPrevious {
		margin-top: var(--ThreadPageShowPrevious-marginTop);
		margin-bottom: var(--ThreadPageShowPrevious-marginTop);
	}
}

.ThreadPage-commentsListContainer {
	/* `.CommentsList` element already has a "negative" `margin-top`,
	   so `margin-top` is set on `.ThreadPage-commentsListContainer` element instead. */
	/* `--Comment-marginTop` is not defined at `:root` level. */
	margin-top: var(--Comment-marginTop--topLevel);
}

.ThreadPage-belowCommentsWithEmptySpaceOnTheLeftSide {
	/* Using `padding-top: 1px` here to prevent "margin collapse" of the children's `margin`s.
	   The reason why `padding-top` is used instead of `margin-top` here is also because
	   `pointer-events: none` property is set on `.Webpage-content` making pointer events
	   "fall through" the top margin and the point under the cursor wouldn't be clickable.
	*/
	padding-top: 1px;

	display: flex;
}

.ThreadPage-belowCommentsWithEmptySpaceOnTheLeftSide-emptySpace {
	flex: none;

	@mixin m-plus {
		min-width: calc(var(--PostThumbnailContainer-maxWidth));
	}
}

.ThreadPage {
	.AutoUpdate {
		margin-top: calc(var(--unit) * 2);

		@mixin upto-s {
			margin-left: auto;
			margin-right: auto;
		}
	}
}

.ThreadPage {
	.InfoBanner,
	.PostForm--page {
		margin-top: calc(var(--unit) * 2);
		@mixin m-plus {
			margin-top: calc(var(--unit) * 3);
		}
	}
}

.ThreadPage {
	.CommentTree:not(.CommentTree--repliesExpanded) > .Comment-container > .Comment-replyFormContainer > .PostFormWithAttachments--comment,
	.ThreadCreateComment.PostFormWithAttachments--comment {
		@mixin m-plus {
			--PostForm-marginLeft--comment: var(--PostThumbnailContainer-maxWidth);
			margin-left: calc(var(--PostForm-marginLeft--comment));
			width: calc(100% - var(--PostForm-marginLeft--comment));
		}
		@mixin upto-s {
			--PostForm-marginLeft--comment: var(--Comment-marginTop--nested);
			margin-left: var(--PostForm-marginLeft--comment);
			margin-right: var(--PostForm-marginLeft--comment);
			width: calc(100% - var(--PostForm-marginLeft--comment) - var(--PostForm-marginLeft--comment));
		}
	}

	.CommentTree--repliesExpanded > .Comment-container > .Comment-replyFormContainer {
		padding-left: var(--CommentTree-marginLeft--child);
		/* width: calc(100% - var(--CommentTree-marginLeft--child)); */

		&:before {
			position: absolute;
			/* This `1px` horizontal shift corresponds to the `1px` shift workaround for `.CommentTree-replies`. */
			left: 0;
			top: 0;
			width: var(--CommentTree-marginLeft--child);
			border-left: var(--CommentTreePath-borderWidth) var(--CommentTreePath-borderStyle) var(--CommentTreePath-color);
			height: 100%;
			content: '';
			display: block;
		}
	}

	.CommentTree--repliesExpanded > .Comment-container > .Comment-spacer--aboveReplyForm {
		/* Non-zero `left` position will be set on this spacer at the first level of nesting of the comment tree. */
		position: relative;
		border-left: var(--CommentTreePath-borderWidth) var(--CommentTreePath-borderStyle) var(--CommentTreePath-color);
	}

	.CommentTree--topLevel.CommentTree--repliesExpanded > .Comment-container {
		& > .Comment-spacer--aboveReplyForm,
		& > .Comment-replyFormContainer:before {
			left: var(--CommentTreePathBranch-marginLeft--workaround);
		}
		& > .Comment-replyFormContainer:before,
		& > .Comment-spacer--aboveReplyForm {
				margin-left: calc(var(--CommentTree-marginLeft--child) * var(--CommentTreePath-marginLeftRatio--root));
		}
	}
}

.ThreadPage {
	.InfoBanner {
		--InfoBanner-paddingLeft: var(--PostThumbnail-marginRight);

		@mixin m-plus {
			justify-content: flex-start;
		}
	}
}

.ThreadPage--onBackground {
	.InfoBanner {
		--InfoBanner-backgroundColor: var(--OnBackground-backgroundColor);
		--InfoBanner-opacity: var(--OnBackground-opacity--content);
		--InfoBanner-paddingTop: var(--unit);
	}
}

.ThreadPage-createCommentSpacer {
	height: var(--Comment-marginTop--topLevel);
}

.ThreadPage-belowCommentsWithEmptySpaceOnTheLeftSide-content {
	width: 100%;
}