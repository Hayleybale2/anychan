import parseAuthor from './parseAuthor'
import parseSubjectFromComment from './parseSubjectFromComment'
import parseAttachment from './parseAttachment'
import parseCommentText from './parseCommentText'
import getInReplyToPosts from './getInReplyToPosts'
import unescapeContent from './unescapeContent'

/**
 * Parses 2ch.hk thread JSON object.
 * @param  {object} thread — 2ch.hk thread JSON object.
 * @param  {object} options — `{ correctGrammar, defaultAuthor }`
 * @return {object}
 * @example
 * // Outputs:
 * // {
 * //   id: '45678',
 * //   author: 'Школьник №2',
 * //   content: ...,
 * //   inReplyTo: [{
 * //     threadId: '12345',
 * //     postId: '45677'
 * //   }],
 * //   createdAt: ...,
 * //   attachments: [{
 * //     id: 1,
 * //     type: 'picture',
 * //     size: 35.5, // in kilobytes
 * //     picture: {
 * //       type: 'image/jpeg',
 * //       sizes: [{
 * //         width: 120,
 * //         height: 40,
 * //         url: 'https://...'
 * //       }, {
 * //         width: 1200,
 * //         height: 400,
 * //         url: 'https://...'
 * //       }]
 * //     }
 * //   }, {
 * //     id: 2,
 * //     type: 'video',
 * //     size: 5260.12, // in kilobytes
 * //     video: {
 * //       type: 'video/webm',
 * //       duration: 50, // in seconds
 * //       width: 800,
 * //       height: 600,
 * //       source: {
 * //         provider: 'file',
 * //         sizes: [{
 * //           width: 800,
 * //           height: 600,
 * //           url: 'https://...'
 * //         }]
 * //       },
 * //       picture: {
 * //         type: 'image/jpeg',
 * //         sizes: [{
 * //           width: 800,
 * //           height: 600,
 * //           url: 'https://...'
 * //         }]
 * //       }
 * //     }
 * //   }]
 * // }
 * parseComment(...)
 */
export default function parseComment(post, options) {
	const { correctGrammar, defaultAuthor } = options
	const id = String(post.num)
	const author = parseAuthor(post.name, defaultAuthor)
	if (post.subject) {
		// Detect `subject` being autogenerated from `comment`.
		// If the `subject` is autogenerated then ignore it.
		if (isAutogeneratedSubject(post.subject, post.comment)) {
			post.subject = null
		}
	}
	// Sometimes users skip the subject field and
	// write the subject in bold as part of the post.
	if (post.comment && !post.subject) {
		const match = parseSubjectFromComment(post.comment)
		if (match) {
			post.subject = match.subject
			post.comment = match.comment
			// If the post subject is all caps then convert it to normal case.
			if (!/[а-я]/.test(post.subject) && /[А-Я]/.test(post.subject)) {
				post.subject = post.subject.toLowerCase()
				post.subject = post.subject.replace(/([а-я])/, _ => _.toUpperCase())
			}
		}
	}
	return {
		id,
		author,
		authorRole: post.trip === '!!%adm%!!' ? 'administrator' : post.trip === '!!%mod%!!' ? 'moderator' : undefined,
		subject: post.subject ? unescapeContent(post.subject) : undefined,
		content: post.comment ? parseCommentText(post.comment, { parseParagraphs: false, correctGrammar }) : undefined,
		inReplyTo: post.comment ? getInReplyToPosts(post.comment) : undefined,
		attachments: post.files.map(parseAttachment).map((attachment, i) => ({ id: i, ...attachment })),
		createdAt: new Date(post.timestamp * 1000)
	}
}

// Detect `subject` being autogenerated from `comment`.
function isAutogeneratedSubject(subject, comment) {
	// This is how `2ch.hk` autogenerates post subjects from content.
	const autogeneratedSubject = comment.replace(/<br>/g, ' ').replace(/<.+?>/g, '')
	return autogeneratedSubject.indexOf(subject) === 0
}